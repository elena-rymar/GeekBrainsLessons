package LessonOOP.lesson2;

//1. Класс кота из прошлого ДЗ расширить функционалом потребления пищи. У каждого кота есть аппетит,
// т.е. количество еды, которое он съедает за один раз;
//2. Кот должен есть из миски. Создайте такую сущность, которая будет обладать объёмом и едой в ней,
// а также методами наполнения и получения информации о количестве еды;
//3. Метод из первого пункта ДЗ должен взаимодействовать с миской, т.е., конкретный кот ест из конкретной миски, уменьшая объём еды в ней;
//4. Предусмотрите проверку, при которой в миске не может получиться отрицательного количества еды (например, в миске 10 единиц еды, а кот пытается съесть 15);
//5. Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось поесть (хватило еды), сытость = true;
//Считаем, что если коту мало еды в тарелке, то он её просто не трогает, то есть не может быть наполовину сыт (это сделано для упрощения логики программы);
//6. Создать массив котов и одну тарелку с едой, попросить всех котов покушать из этой тарелки и потом вывести информацию о сытости котов в консоль;
public class Cat extends Animal {
    private int appetite;
    private boolean fed; //Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны)
    // как мы знаем boolean default false и не будем производить инициализацию


    public Cat(String name, int appetite) {
        super("Кот " + name);
        this.appetite = appetite;
        this.runLimit = 200;
        this.jumpLimit = 2;
    }
    public void swim (int distance){
        System.out.println(name + " не умеет плавать");
    }

    public void eat(Plate plate) {
        fed = plate.decreaseFood(appetite);
    }

    public void info() {
        System.out.println(name + " " + (fed ? "сыт " : "голоден "));
    }

}
